#!/bin/bash

set -euo pipefail

DIR="$(cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd)"

# shellcheck source=lib/plugin.bash
. "${DIR}/../lib/plugin.bash"

DRY_RUN="${DRY_RUN:-}"
KEY_NAME="../git_ssh_checkout_plugin_ssh_key"

REPOSITORY_URL_OPTION=$(plugin_read_config REPOSITORY_URL "${BUILDKITE_REPO:-}")
SSH_SECRET_KEY_NAME_OPTION=$(plugin_read_config SSH_SECRET_KEY_NAME "GIT_SSH_CHECKOUT_PLUGIN_SSH_KEY")
CHECKOUT_PATH_OPTION=$(plugin_read_config CHECKOUT_PATH "${BUILDKITE_BUILD_CHECKOUT_PATH:-.}")
CHECKOUT_BRANCH_OPTION=$(plugin_read_config BRANCH "${BUILDKITE_BRANCH:-.}")
CHECKOUT_COMMIT_OPTION=$(plugin_read_config COMMIT "${BUILDKITE_COMMIT:-.}")

echo "Running SSH Checkout plugin with options:"
echo " - repository-url: ${REPOSITORY_URL_OPTION}"
echo " - ssh-secret-key-name: ${SSH_SECRET_KEY_NAME_OPTION}"
echo " - checkout-path: ${CHECKOUT_PATH_OPTION}"
echo " - branch: ${CHECKOUT_BRANCH_OPTION}"
echo " - commit: ${CHECKOUT_COMMIT_OPTION}"

if [ "${DRY_RUN}" != "true" ]; then
  # Populate the key file from the secret value
  buildkite-agent secret get "${SSH_SECRET_KEY_NAME_OPTION}" | tr -d '\015' > "${KEY_NAME}"
  chmod 0400 "${KEY_NAME}"

  # Clone the repository
  git clone "${REPOSITORY_URL_OPTION}" "${CHECKOUT_PATH_OPTION}" \
    --config core.sshCommand="ssh -i ${KEY_NAME} -o StrictHostKeyChecking=no -y"

  cd "${CHECKOUT_PATH_OPTION}"

  # Clean up the clone
  git clean -ffxdq

  # Checkout the branch
  if [ "${CHECKOUT_BRANCH_OPTION:-}" != "" ]; then
    # Fetch the branch
    git fetch -v --prune -- origin "refs/heads/${CHECKOUT_BRANCH_OPTION}"
  fi

  # Checkout the correct ref to continue the build
  if [ "${CHECKOUT_COMMIT_OPTION:-}" = "HEAD" ] || [ "${CHECKOUT_COMMIT_OPTION}" = "" ]; then
    git checkout -f "origin/${CHECKOUT_BRANCH_OPTION}"
  else
    git checkout -f "${CHECKOUT_COMMIT_OPTION}"
  fi
fi
